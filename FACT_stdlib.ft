scope
print @ (num str) # Print a string. 
{
  for (num i; i < size (str); i += 1)
    putchar (str[i]);
}

scope
cat @ (num op1, num op2) # Concatinate two strings
{
  num arr_size;

  if (size (op1) == 0)
    arr_size = 1;
  else
    arr_size = size (op1);

  if (size (op2) == 0)
    arr_size += 1;
  else
    arr_size += size (op2);
    
  num [arr_size] res;
  num i;
  
  if (size (op1) == 0)
  {
    res[i] = op1;
    i += 1;
  }
  else
  {
    for (i = 0; i < size (op1); i += 1)
      res[i] = op1[i];
  }

  if (size (op2) == 0)
    res[i] = op2;
  else
  {
    for (num j = 0; j < size (op2); j += 1)
      res[i + j] = op2[j];
  }

  return res;
}

scope
linked_list @ (num size)
{
  for (scope curr = this:up; size > 0; size -= 1)
  {
    (curr: num n) = size;
    curr: scope get_end @ ()
    {
      scope curr = up;
      while (curr:next?)
        curr = curr:next;
      return curr;
    }
    curr: scope next;
    curr = curr:next;
  }
  return this;
}

scope
is_num @ (?n)
{
  catch n = 0; handle return 0;
  return 1;
}

scope
is_scope @ (?n)
{
  catch n = 0; handle return 1;
  return 0;
}