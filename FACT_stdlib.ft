defunc cat (num op1, num op2) # Concatinate two strings
{
  num arr_size;
  if (size (op1) == 0)
    arr_size = 1;
  else
    arr_size = size (op1);

  if (size (op2) == 0)
    arr_size += 1;
  else
    arr_size += size (op2);
    
  num [arr_size] res;
  num i;
  
  if (size (op1) == 0) {
    res[i] = op1;
    i += 1;
  } else {
    for (i = 0; i < size (op1); i += 1)
      res[i] = op1[i];
  }

  if (size (op2) == 0)
    res[i] = op2;
  else {
    for (num j = 0; j < size (op2); j += 1)
      res[i + j] = op2[j];
  }

  return res;
}

defunc linked_list (num size)
{
  for (scope curr = this:up; size > 0; size -= 1) {
    (curr: num n) = size;
    curr: scope get_end @ ()
    {
      scope curr = up;
      while (curr:next?)
        curr = curr:next;
      return curr;
    }
    curr: scope next;
    curr = curr:next;
  }
  return this;
}

# These two are sort of clever.

defunc is_num (?n)
{
  catch n = 0; handle return 0;
  return 1;
}

defunc is_scope (?n)
{
  catch n = 0; handle return 1;
  return 0;
}

scope math = ({
  # Math functions and definitions 

  # The value of PI. Haha, just kidding. 
  num PI = 3.1415926535897932;

  defunc sin (num x) 
  {
    if (x >= PI * 2)
      x %= PI * 2;

    if (x == 0 || x == PI)
      return 0;
    else if (x == PI / 2)
      return 1;
    else if (x ==  3 * PI / 2)
      return -1;
    
    # We use recursion because that is great.
    defunc sin_inner (num n, num x, num lim) 
    {
      if (n >= lim)
        return 1;
      return n * (n + 1) - (x * x) + (n * (n + 1) * x * x) / sin_inner (n + 2, x, lim);
    }
    return x / (1 + (x * x) / sin_inner (2, x, 50));
  }

  # We define the rest of the trig functions in terms of sine

  defunc cos (num x)
  {
    return sin (PI / 2 - x);
  }

  defunc tan (num x)
  {
    return sin (x) / cos (x);
  }
});