{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"FACT","body":"### What is FACT? \r\nFACT is a new programming language that is designed to exploit the usefulness of mutable scopes (a.k.a. first class environments) to create a language that is both very simple and yet supports many complex paradigms (such as classes, inheritance, etc). FACT does not have any keywords such as \"class\" or \"method,\" nor does it have special data types for objects (in the OOP sense that is). Indeed, classes and methods are easy to implement without such keywords, and there are only two data types: scopes and numbers (real numbers of arbitrary precision). \r\n\r\n### What does the name \"FACT\" stand for?\r\nThe name \"FACT\" stands for \"Functions Are Classes Too,\" an allusion to the language's malleable nature. \r\n\r\n### What is FACT good for? \r\nWhile it is a Turing complete programming language and theoretically could be used for a whole lot, especially in places where JavaScript is used (the languages are slightly similar). However, as the language is only in its infant stages, it really only excels as an arbitrary precision calculator. In the purely utilitarian sense right now it is essentially BC but nicer. \r\n\r\n### Can you give me some sample code?\r\nHere are three ways to define a recursive factorial function in FACT:\r\n\r\n```\r\n# Method one: \r\nscope fact1 @ (num n) \r\n{\r\n  if (n > 1) \r\n    return n * fact1 (n - 1);\r\n  return 1;\r\n}\r\n# Method two, using the \"defunc\" keyword:\r\ndefunc fact2 (num n) \r\n{\r\n  if (n > 1) \r\n    return n * fact2 (n - 1);\r\n  return 1;\r\n} \r\n# Method three, using the \"defunc\" and \"this\" keyword:\r\ndefunc fact3 (num n) \r\n{\r\n  if (n > 1) \r\n    return n * this (n - 1);\r\n  return 1;\r\n}\r\n```\r\n\r\nFACT also has native support for threading. The following example, taken from the file thread_test.ft, illustrates how threading is done safely through message passing.\r\n\r\n```\r\n# \"${\" runs its body in a new thread and returns the ID number of the new thread\r\nnum thread_1 = ${\r\n  while (1) {\r\n    scope m = receive ();\r\n    if (m:message == \"exit\") {\r\n      print (\"exit signal received by thread \");\r\n      print (m:sender);\r\n      break;\r\n    }\r\n    print ('Message \"');\r\n    print (m:message);\r\n    print ('\" received from thread ');\r\n    print (m:sender);\r\n  }\r\n  print (\"Thread 1 exiting now.\\n\");\r\n  send (0, \"done\");\r\n};\r\n\r\nsend (thread_1, \"Hello there!\");\r\nsend (thread_1, \"Im glad this works!\");\r\nsend (thread_1, \"now lets complicate things even further...\");\r\n\r\nnum thread_2 = ${\r\n  # Wait for a message of a thread id, and then send a message to that thread.\r\n  while (1) {\r\n    scope m = receive ();\r\n    send (m:message, \"exit\");\r\n    break;\r\n  }\r\n  print (\"Thread 2 exiting now.\\n\");\r\n};\r\n\r\nsend (thread_1, \"are you ready thread 1? Actually I dont care!\");\r\nsend (thread_2, thread_1);\r\nsend (thread_1, \"and we're done!\");\r\n\r\nreceive ();\r\n\r\nprint (\"and that's the show folks!\\n\");\r\n```\r\n\r\n### Authors and Contributors\r\nFACT is written by Matthew Plant (@rookieMP). You can contact me via my email, rookie dot mp at gmail dot com. If you have any questions about FACT __at all__, feel free to contact me.","tagline":"The FACT (Functions Are Classes Too) Programming Language"}